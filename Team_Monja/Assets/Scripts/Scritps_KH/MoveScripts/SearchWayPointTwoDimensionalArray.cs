using UnityEngine;

public class SearchWayPointTwoDimensionalArray : MonoBehaviour
{
    [SerializeField]
    private GameObject _wayPoint = default;
    private Transform[] _wayPoints = default;
    private Transform _targetWayPoint = default;

    /// <summary>
    /// ノードテーブル 添え字として使うときは1を引く
    /// </summary>
    int[,] _nextWayPointTable = new int[32, 32]
    {
        {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31}, // 列 行き先
        {1,0,2,2,2,2,2,2,2,2,2,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,2,2,2,2,2,2},
        {2,1,0,3,3,3,3,3,3,3,3,12,12,12,12,12,12,12,12,19,19,19,19,19,19,19,3,3,3,3,3,3},
        {3,2,2,0,4,4,4,4,4,4,4,2,2,13,2,2,2,18,18,2,20,20,20,20,20,20,4,4,4,4,4,4},
        {4,3,3,3,0,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,3,21,22,22,22,22,5,27,5,27,27,27},
        {5,4,4,4,4,0,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,23,23,23,26,4,26,26,26,26},
        {6,5,5,5,5,5,0,7,7,7,7,5,5,5,5,5,5,5,5,5,5,5,5,5,25,25,5,5,28,28,28,28},
        {7,6,6,6,6,6,6,0,8,8,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,6,8,8,8},
        {8,7,7,7,7,7,7,7,0,9,9,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,31,7,31,31,31},
        {9,8,8,8,8,8,8,8,8,0,10,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8},
        {10,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
        {11,1,12,12,12,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12},
        {12,11,2,2,2,2,2,2,2,2,2,11,0,13,13,13,13,13,13,2,2,2,2,2,2,2,13,13,13,13,13,13},
        {13,12,12,3,3,3,3,3,3,3,3,12,12,0,14,15,15,15,15,12,12,12,12,12,12,12,3,3,3,3,3,3},
        {14,13,13,13,13,13,13,13,13,13,13,13,13,13,0,15,16,16,16,13,13,13,13,13,13,13,13,13,13,13,13,13},
        {15,13,13,13,13,13,13,13,13,13,13,13,13,13,14,0,16,16,16,13,13,13,13,13,13,13,13,13,13,13,13,13},
        {16,15,15,17,17,17,17,17,17,17,17,15,15,15,14,15,0,17,17,15,17,17,17,17,17,17,17,17,17,17,17,17},
        {17,3,3,3,3,3,3,3,3,3,3,16,16,16,16,16,16,0,18,3,3,3,3,3,3,3,3,3,3,3,3,3},
        {18,17,17,17,4,4,4,4,4,4,4,17,17,17,17,17,17,17,0,17,17,17,4,4,4,4,4,4,4,4,4,4},
        {19,2,2,20,20,20,20,20,20,20,20,2,2,2,2,2,2,2,2,0,20,20,20,20,20,20,20,20,20,20,20,20},
        {20,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,19,0,21,21,21,21,21,21,21,21,21,21,21},
        {21,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,22,22,20,20,0,22,22,22,22,22,22,22,22,22,22},
        {22,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,21,21,21,0,23,23,23,4,4,4,4,4,4},
        {23,22,22,22,22,22,24,24,24,24,24,22,22,22,22,22,22,22,22,22,22,22,22,0,24,24,24,24,24,24,24,24},
        {24,23,23,23,23,25,25,25,25,25,25,23,23,23,23,23,23,23,23,23,23,23,23,23,0,25,25,25,25,25,25,25},
        {25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,24,24,24,24,24,24,0,6,6,6,6,6,6},
        {26,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,29,28,29,29,29},
        {27,4,4,4,4,29,29,29,29,29,29,4,4,4,4,4,4,4,4,4,4,4,4,4,29,29,29,0,29,29,29,29},
        {28,26,26,26,26,26,26,30,30,30,30,26,26,26,26,26,26,26,26,26,26,26,26,26,30,30,26,26,0,26,30,30},
        {29,27,27,27,27,26,26,30,30,30,30,27,27,27,27,27,27,27,27,27,27,27,27,27,30,30,27,27,27,0,30,30},
        {30,28,28,28,28,28,31,31,31,31,31,29,29,29,29,29,29,29,29,28,28,28,28,28,28,28,28,29,28,29,0,31},
        {31,30,30,30,30,30,30,8,8,8,8,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0},
     // 行
     // 自分の場所
    };

    /// <summary>
    /// ノードテーブル 添え字として使うときは1を引く
    /// </summary>
    int[,] _bossWayPointTable = new int[13, 13]
    {
        {0,1,2,3,4,5,6,7,8,9,10,11,12}, // 列 行き先
        {1,0,2,2,4,5,4,4,4,4,4,4,4},
        {2,1,0,3,4,5,6,5,5,5,5,5,5},
        {3,2,2,0,2,5,6,5,5,6,5,5,6},
        {4,1,2,2,0,5,5,7,8,8,7,8,8},
        {5,1,2,3,4,0,6,7,8,9,7,8,9},
        {6,2,2,3,5,5,0,8,8,9,8,8,9},
        {7,4,5,5,4,5,5,0,8,8,9,10,10},
        {8,4,5,6,4,5,6,7,0,9,10,11,12},
        {9,5,5,6,5,5,6,8,8,0,11,11,12},
        {10,7,7,7,7,7,7,7,8,8,0,11,11},
        {11,8,8,8,8,8,8,7,8,9,10,0,12},
        {12,9,9,9,9,9,9,8,9,9,11,11,0},   
     // 行
     // 自分の場所
    };

    public int[,] NextWayPointTable
    {
        get { return _nextWayPointTable; }
    }

    public int[,] BossWayPointTable
    {
        get { return _bossWayPointTable; }
    }

    public Transform TargetWayPoint
    {
        get { return _targetWayPoint; }
        set { _targetWayPoint = value; }
    }

    public Transform[] WayPoints
    {
        get { return _wayPoints; }
    }

    void Start()
    {
        // 子オブジェクトの数で配列を初期化
        _wayPoints = new Transform[_wayPoint.transform.childCount];

        int index = 0;

        foreach (Transform child in _wayPoint.transform)
        {
            _wayPoints[index] = child;
            index++;
        }
    }

}
